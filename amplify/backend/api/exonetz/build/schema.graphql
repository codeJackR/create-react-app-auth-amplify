type Influencer @aws_iam @aws_api_key {
  id: ID!
  Name: String
  email_id: String
  username: String
  description: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelInfluencerConnection @aws_api_key @aws_iam {
  items: [Influencer]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelInfluencerFilterInput {
  id: ModelIDInput
  Name: ModelStringInput
  email_id: ModelStringInput
  username: ModelStringInput
  description: ModelStringInput
  and: [ModelInfluencerFilterInput]
  or: [ModelInfluencerFilterInput]
  not: ModelInfluencerFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getInfluencer(id: ID!): Influencer @aws_api_key @aws_iam
  listInfluencers(filter: ModelInfluencerFilterInput, limit: Int, nextToken: String): ModelInfluencerConnection @aws_api_key @aws_iam
  syncInfluencers(filter: ModelInfluencerFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelInfluencerConnection @aws_api_key @aws_iam
}

input CreateInfluencerInput {
  id: ID
  Name: String
  email_id: String
  username: String
  description: String
  _version: Int
}

input UpdateInfluencerInput {
  id: ID!
  Name: String
  email_id: String
  username: String
  description: String
  _version: Int
}

input DeleteInfluencerInput {
  id: ID!
  _version: Int
}

type Mutation {
  createInfluencer(input: CreateInfluencerInput!, condition: ModelInfluencerConditionInput): Influencer @aws_api_key @aws_iam
  updateInfluencer(input: UpdateInfluencerInput!, condition: ModelInfluencerConditionInput): Influencer @aws_api_key @aws_iam
  deleteInfluencer(input: DeleteInfluencerInput!, condition: ModelInfluencerConditionInput): Influencer @aws_api_key @aws_iam
}

input ModelInfluencerConditionInput {
  Name: ModelStringInput
  email_id: ModelStringInput
  username: ModelStringInput
  description: ModelStringInput
  and: [ModelInfluencerConditionInput]
  or: [ModelInfluencerConditionInput]
  not: ModelInfluencerConditionInput
}

type Subscription {
  onCreateInfluencer: Influencer @aws_subscribe(mutations: ["createInfluencer"]) @aws_api_key @aws_iam
  onUpdateInfluencer: Influencer @aws_subscribe(mutations: ["updateInfluencer"]) @aws_api_key @aws_iam
  onDeleteInfluencer: Influencer @aws_subscribe(mutations: ["deleteInfluencer"]) @aws_api_key @aws_iam
}
